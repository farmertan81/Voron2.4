
#####################################################################
#   Macros
#####################################################################

[gcode_macro QGL]
description: Shortcut for quad_gantry_level
gcode:
    QUAD_GANTRY_LEVEL
    
[gcode_macro WARM_UP]
description: Home, perform QGL, move to (X175, Y175, Z150), and heat bed to 110Â°C
gcode:
     # Set bed heater to 150 degrees
    M140 S110
    # Home all axes
    G28
    
    # Perform Quad Gantry Leveling
    quad_gantry_level
    
    # Move toolhead to the specified position
    G1 X175 Y175 Z150 F3000.0
    
    # Set bed heater to 150 degrees
    M140 S110
    
    
[gcode_macro PARK_CENTER]
gcode:
    SAVE_GCODE_STATE NAME=PARK_CENTER ; park the head at the front of the printer
    G90
    G1 X175 Y175 Z150 F3000.0
    RESTORE_GCODE_STATE NAME=PARK_CENTER

[gcode_macro LOAD_MATERIAL]

variable_extruder_temp: 265
variable_extrude_len: 100
gcode:
  {% set extruder_temp = params.EXTRUDER_TEMP|default(extruder_temp)|int %}
  {% set extrude_len = params.EXTRUDE_LEN|default(extrude_len)|int %}
  RESPOND TYPE=command MSG='Waiting for nozzle temp to reach {extruder_temp}c'
  M109 S{extruder_temp}
  G91
  G1 E{extrude_len} F180
  M400



[gcode_macro UNLOAD_MATERIAL]

variable_extruder_temp: 265
gcode:
  {% set extruder_temp = params.EXTRUDER_TEMP|default(extruder_temp)|int %}
  SAVE_GCODE_STATE NAME=myMoveState
  RESPOND TYPE=command MSG='Waiting for nozzle temp to reach {extruder_temp}c'
  M109 S{extruder_temp}
  G91
  G1 E20 F180
  G1 E-30 F180
  G1 E-50 F2000
  M400
  RESTORE_GCODE_STATE NAME=myMoveState
  

[gcode_macro DATA_SAMPLE]
gcode:
  {% set bed_temp = params.BED_TEMP|default(110)|int %}
  {% set nozzle_temp = params.NOZZLE_TEMP|default(250)|int %}
  {% set min_temp = params.MIN_TEMP|default(40)|int %}
  {% set max_temp = params.MAX_TEMP|default(70)|int %}
  G90
  M106 S255
  RESPOND TYPE=command MSG='Waiting for Coil to cool to 40'
  M117 Waiting for Coil to cool to 40
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM={min_temp}
  RESPOND TYPE=command MSG='Starting Phase 1 of 4'
  M117 Starting Phase 1 of 4
  M106 S0
  G28
  G0 Z1
  M104 S{nozzle_temp}
  M140 S{bed_temp}
  G4 P1000
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM={min_temp}
  CARTOGRAPHER_STREAM FILENAME=data1
  M117 Waiting for Coil to heat to 70
  RESPOND TYPE=command MSG='Waiting for Coil to heat to 70'
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM={max_temp}
  CARTOGRAPHER_STREAM FILENAME=data1
  M104 S0
  M140 S0
  M106 S255
  G0 Z80
  RESPOND TYPE=command MSG='Waiting for Coil to cool to 40'
  M117 Waiting for Coil to cool to 40
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM={min_temp}
  M117 Starting Phase 2 of 4
  RESPOND TYPE=command MSG='Starting Phase 2 of 4'
  M106 S0
  G28 Z0
  G0 Z2
  M104 S{nozzle_temp}
  M140 S{bed_temp}
  G4 P1000
  CARTOGRAPHER_STREAM FILENAME=data2
  M117 Waiting for Coil to heat to 70
  RESPOND TYPE=command MSG='Waiting for Coil to heat to 70'
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM={max_temp}
  CARTOGRAPHER_STREAM FILENAME=data2
  M104 S0
  M140 S0
  M106 S255
  G0 Z80
  RESPOND TYPE=command MSG='Waiting for Coil to cool to 40'
  M117 Waiting for Coil to cool to 40
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM={min_temp}
  M117 "Starting Phase 3 of 4"
  RESPOND TYPE=command MSG='Starting Phase 3 of 4'
  M106 S0
  G28 Z0
  G0 Z3
  M104 S{nozzle_temp}
  M140 S{bed_temp}
  G4 P1000
  CARTOGRAPHER_STREAM FILENAME=data3
  M117 Waiting for Coil to heat to 70
  RESPOND TYPE=command MSG='Waiting for Coil to heat to 70'
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM={max_temp}
  CARTOGRAPHER_STREAM FILENAME=data3
  M104 S0
  M140 S0
  RESPOND TYPE=command MSG='Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/cartographer-klipper/'
  M117 "Testing complete, please move files using: mv ~/klipper/data1 ~/klipper/data2 ~/klipper/data3 ~/cartographer-klipper/"
  RESPOND TYPE=command MSG='Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta'
  M117 "Follow the remaining instructions here: https://docs.cartographer3d.com/cartographer-probe/advanced-features/temperature-differential-calibration-beta"


[gcode_macro CARTO_MEASURE_PLANARBACKLASH]
description: Calibrate backlash at each corner
gcode:
  {% if printer.toolhead.homed_axes != "xyz" %}
    { action_raise_error("Printer not homed!"   ) } {% endif %}
  {% if printer.configfile.settings.scanner is not defined   %}
    { action_raise_error("[Scanner] not found!" ) } {% endif %}
  {% if printer.configfile.config.bed_mesh.zero_reference_position is not defined %}
    { action_raise_error("zero_reference_position not found!")} {% endif %}
    
  {% if printer.configfile.settings.z_tilt is defined %}
    {% set planeCfg = "z_tilt"        %}
    {% set planeCMD = "Z_TILT_ADJUST" %}
  {% elif printer.configfile.settings.quad_gantry_level is defined %} 
    {% set planeCfg = "quad_gantry_level" %}
    {% set planeCMD = "QUAD_GANTRY_LEVEL" %}
  {% elif printer.configfile.settings.z_tilt_ng is defined %}
    {% set planeCfg = "z_tilt_ng"     %}
    {% set planeCMD = "Z_TILT_ADJUST" %}
  {% else %}
    { action_raise_error("This printer has no ztilt / QGL ") }
  {% endif %}
  
  {% set planeDef = printer.configfile.settings[planeCfg] %}
  {% set planeRange = planeDef.points | count             %}
  {% if not printer[planeCfg].applied  %} 
    { action_raise_error("Plane not leved, run {planeCMD} first")} {% endif %} 

  {% set moveSpeed  = planeDef['speed'] | int * 60  %}
  {% set moveAccel  = printer.configfile.config.printer.max_accel | int * 0.80 %}
  {% set moveHeight = 10 if planeDef['horizontal_move_z'] < 10 else planeDef['horizontal_move_z'] %}

  RESPOND PREFIX=ðŸ’¨ MSG="Moving Height: {moveHeight} Speed: {planeDef['speed']} Accel: {moveAccel} You have 4s to hit eStop"
  G4 P4000
  G90
  G0 Z{moveHeight}

  {% for i in range(planeRange) %}
    {% set testX = planeDef.points[i][0]|float %}
    {% set testY = planeDef.points[i][1]|float %}
    RESPOND PREFIX=ðŸ”¢ MSG="Point {i+1}/{planeRange+1} ({planeCMD})"
    RESPOND PREFIX=ðŸ“Œ MSG="Tesing at X={testX} Y={testY}"

    G1 X{testX} Y{testY} Z{moveHeight} F{moveAccel}
    M400
    CARTOGRAPHER_ESTIMATE_BACKLASH
    M400
    G0 Z{moveHeight}
  {% endfor %}

  {% set posCenter = printer.configfile.config.bed_mesh.zero_reference_position %}
  {% set testX = posCenter.split(",")[0]|float %}
  {% set testY = posCenter.split(",")[1]|float %}
  RESPOND PREFIX=ðŸš© MSG="Point {planeRange+1}/{planeRange+1} (zero_reference_position)"
  RESPOND PREFIX=ðŸ“Œ MSG="Tesing at X={testX} Y={testY}"

  G1 X{testX} Y{testY} Z{moveHeight} F{moveAccel}
  M400
  CARTOGRAPHER_ESTIMATE_BACKLASH
  M400
  G0 Z{moveHeight}